## finishVisit.jy
##
## Final bookkeeping for a visit - add metadata to dataCatalog that is
## only known at this step in the operation
##

## General note: pipeline variables defined in the .xml are available
## without prelude.  Variables defined within the running task must be
## requested by streamID.


from java.util import HashMap
from java.lang import String
from java.lang import Number
from java.util.regex import Pattern
import os,sys



debug = False


def dumpPipeline():
    
    print 'PIPELINE: getProcess = ',pipeline.getProcess()
    print 'PIPELINE: getStream = ',pipeline.getStream()
    print 'PIPELINE: getStreamPath = ',pipeline.getStreamPath()
    print 'PIPELINE: getTask = ',pipeline.getTask()
    print 'PIPELINE: getTaskVersion = ',pipeline.getTaskVersion()
    print 'PIPELINE: getTaskVersionPath = ',pipeline.getTaskVersionPath()
    return 0

def dumpStream(streamID):
    print 'STREAM ',streamID
    sID = streamID.getId()

    print 'STREAM ',sID,': getExecutionNumber = ',streamID.getExecutionNumber()
    print 'STREAM ',sID,': getHasParent = ',streamID.getHasParent()
    print 'STREAM ',sID,': getId = ',streamID.getId()
    print 'STREAM ',sID,': getIdPath = ',streamID.getIdPath()
    nProcInsts = len(streamID.getProcessInstances())
    print 'STREAM ',sID,': nProcInsts = ',nProcInsts
    #print 'STREAM ',sID,': getProcessInstances = ',streamID.getProcessInstances()
    print 'STREAM ',sID,': getStatus = ',streamID.getStatus()
    nSubStreams = len(streamID.getSubStreams())
    print 'STREAM ',sID,': nSubStreams = ',nSubStreams
    
    #print 'STREAM ',sID,': getSubStreams = ',streamID.getSubStreams()
    print 'STREAM ',sID,': getTask = ',streamID.getTask()
    nVars = len(streamID.getVariables())
    print 'STREAM ',sID,': # variables = ',nVars
    print 'STREAM ',sID,': getVariables = ',streamID.getVariables()
    print 'STREAM ',sID,': isLatestExecution = ',streamID.isLatestExecution()
    return 0

def dumpProcessInstance(piID):
    print 'PROCESSINST ',piID
    pName = piID.getProcess().getName()
    print 'PROCESSINST ',pName,': getStatus = ',piID.getStatus()
    #print 'PROCESSINST ',pName,': getSubmitDate = ',piID.getSubmitDate
    #print 'PROCESSINST ',pName,': getStartDate = ',piID.getStartDate
    nVars = len(piID.getVariables())
    print 'PROCESSINST ',pName,': nVars = ',nVars
    print 'PROCESSINST ',pName,': getVariables = ',piID.getVariables()
    print 'PROCESSINST ',pName,': isFinalStatus = ',piID.isFinalStatus()
    #print 'PROCESSINST ',pName,': isLatestExecution = ',piID.isLatestExecution
    return 0




##############################################################################
##############################################################################
##############################################################################



def addMetadata():

    #dumpPipeline()

## Extract pipeline variables from the setupVisit step
    thisStream = pipeline.getCurrentStream()
    #dumpStream(thisStream)


    #  We want the DC2_SENSORLIST and DC2_SENSORLIST_LEN from all of
    #  the RunTrim steps in the 'trim' substream
    #

    # get pointer to 'trim' substream
    trimIDs = thisStream.getSubStreams('trim')
    if debug:print 'len(trimIDs) = ',len(trimIDs)
    ntrim=0
    totSensors = 0
    totSensorList = []
    for trimID in trimIDs:
        #dumpStream(trimID)
        runTrimID = trimID.getProcessInstance('RunTrim')
        nSensors = runTrimID.getVariable('DC2_SENSORLIST_LEN')
        sensorList = runTrimID.getVariable('DC2_SENSORLIST')
        #print 'nSensors = ',nSensors
        #print 'sensorList = ',sensorList
        totSensors += nSensors
        #dumpProcessInstance(runTrimID)

        if nSensors > 0:
            sensorL = sensorList.split(',')
            totSensorList += sensorL
            pass
        #print ntrim
        ntrim += 1
        pass

    print 'totSensors = ',totSensors
    print 'totSensorList = ',totSensorList

    tSensorList = ''
    if len(totSensorList) > 0:
        tSensorList = totSensorList[0]
        for sid in range(1,len(totSensorList)):
            tSensorList += ","+totSensorList[sid]
            pass
        pass

    print 'tSensorList = ',tSensorList



    ###################################################################################
    ####  Add simulated sensor list to dataCatalog metadata
    ###################################################################################
    

    ## Construct dataCatalog path (including 'group'): /LSST-DESC/DC2/<taskName>/<obsHistID>

    # Get the obsHistID (used as dataCat group name)
    setupID = thisStream.getProcessInstance('setupVisit')
    obsHistID = setupID.getVariable("DC2_OBSHISTID")
    if debug:print 'obsHistID = ',obsHistID

    # Get name of this task
    thisTask = pipeline.getCurrentTask()
    taskName = thisTask.getName()
    print 'taskName = ',taskName

    dataCatPath = '/LSST-DESC/DC2/'+taskName+'/'+str(obsHistID)
    print 'dataCatPath = ',dataCatPath

    ## Find dataCat group in which to add metadata
    dcGroup = datacatalog.getDatasetGroup(dataCatPath)
    print 'dcGroup = ',dcGroup

    ## Put metadata into a hashmap
    md = HashMap()
    md.put('nSensors',int(totSensors))
    md.put('sensorList',tSensorList)

    ## Store metadata into the dataCatalog

    ##### As of 6/26/2018, this next line fails with odd Oracle error.
    ##### Brian investigating.  In meantime, comment out
    #datacatalog.addDatasetGroupMetaData(datacatalog.getDatasetGroup(dataCatPath),md)
    
    return 0




if __name__ == "__main__":

    rc = addMetadata()
    print 'Return from finishVisit-jy = ',rc
    sys.exit(rc)
