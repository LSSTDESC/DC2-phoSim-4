## finishVisit.jy
##
## Final bookkeeping for a visit
##

## General note: pipeline variables defined in the .xml are available
## without prelude.  Variables defined within the running task must be
## requested by streamID.


from java.util import HashMap
from java.lang import String
from java.lang import Number
from java.util.regex import Pattern
import os,sys



debug = False


def dumpPipeline():
    
    print 'PIPELINE: getProcess = ',pipeline.getProcess()
    print 'PIPELINE: getStream = ',pipeline.getStream()
    print 'PIPELINE: getStreamPath = ',pipeline.getStreamPath()
    print 'PIPELINE: getTask = ',pipeline.getTask()
    print 'PIPELINE: getTaskVersion = ',pipeline.getTaskVersion()
    print 'PIPELINE: getTaskVersionPath = ',pipeline.getTaskVersionPath()
    return 0

def dumpStream(streamID):
    print 'STREAM ',streamID
    sID = streamID.getId()

    print 'STREAM ',sID,': getExecutionNumber = ',streamID.getExecutionNumber()
    print 'STREAM ',sID,': getHasParent = ',streamID.getHasParent()
    print 'STREAM ',sID,': getId = ',streamID.getId()
    print 'STREAM ',sID,': getIdPath = ',streamID.getIdPath()
    nProcInsts = len(streamID.getProcessInstances())
    print 'STREAM ',sID,': nProcInsts = ',nProcInsts
    #print 'STREAM ',sID,': getProcessInstances = ',streamID.getProcessInstances()
    print 'STREAM ',sID,': getStatus = ',streamID.getStatus()
    nSubStreams = len(streamID.getSubStreams())
    print 'STREAM ',sID,': nSubStreams = ',nSubStreams
    
    #print 'STREAM ',sID,': getSubStreams = ',streamID.getSubStreams()
    print 'STREAM ',sID,': getTask = ',streamID.getTask()
    nVars = len(streamID.getVariables())
    print 'STREAM ',sID,': # variables = ',nVars
    print 'STREAM ',sID,': getVariables = ',streamID.getVariables()
    print 'STREAM ',sID,': isLatestExecution = ',streamID.isLatestExecution()
    return 0

def dumpProcessInstance(piID):
    print 'PROCESSINST ',piID
    pName = piID.getProcess().getName()
    print 'PROCESSINST ',pName,': getStatus = ',piID.getStatus()
    #print 'PROCESSINST ',pName,': getSubmitDate = ',piID.getSubmitDate
    #print 'PROCESSINST ',pName,': getStartDate = ',piID.getStartDate
    nVars = len(piID.getVariables())
    print 'PROCESSINST ',pName,': nVars = ',nVars
    print 'PROCESSINST ',pName,': getVariables = ',piID.getVariables()
    print 'PROCESSINST ',pName,': isFinalStatus = ',piID.isFinalStatus()
    #print 'PROCESSINST ',pName,': isLatestExecution = ',piID.isLatestExecution
    return 0

def addMetadata():

    #dumpPipeline()

## Extract pipeline variables from the setupVisit step
    thisStream = pipeline.getCurrentStream()

    #dumpStream(thisStream)

    #  We want the DC2_SENSORLIST and DC2_SENSORLIST_LEN from all of
    #  the RunTrim steps in the 'trim' substream
    #

    # get pointer to 'trim' substream
    trimIDs = thisStream.getSubStreams('trim')
    if debug:print 'len(trimIDs) = ',len(trimIDs)
    ntrim=0
    totSensors = 0
    totSensorList = []
    for trimID in trimIDs:
        #dumpStream(trimID)
        runTrimID = trimID.getProcessInstance('RunTrim')
        nSensors = runTrimID.getVariable('DC2_SENSORLIST_LEN')
        sensorList = runTrimID.getVariable('DC2_SENSORLIST')
        #print 'nSensors = ',nSensors
        #print 'sensorList = ',sensorList
        totSensors += nSensors
        #dumpProcessInstance(runTrimID)

        if nSensors > 0:
            sensorL = sensorList.split(',')
            totSensorList += sensorL
            pass
        #print ntrim
        ntrim += 1
        pass

    print 'totSensors = ',totSensors
    print 'totSensorList = ',totSensorList

    if len(totSensorList) > 0:
        tSensorList = totSensorList[0]
        for sid in range(1,len(totSensorList)):
            tSensorList += ","+totSensorList[sid]
            pass
        pass

    print 'tSensorList = ',tSensorList



    ## At this point we need to decide what to do with these data: 1)
    ## pipeline variable(s); 2) dataCatalog metadata; 3) small text
    ## file.....???

    
    return 0






    ###########  WARNING:  OLD STUFF BELOW  ############   

    if debug:print '1- DC2_SENSORID = ',DC2_SENSORID

    ## Prepare to extract and store metadata
    raytraceID = pipeline.getProcessInstance("RunRaytrace")
    raytraceVars = HashMap(raytraceID.getVariables())
    outputFiles = raytraceVars.get("DC2_OUTPUTLIST")   # list of output data product filenames from raytrace
    outputDir = raytraceVars.get("DC2_OUTPUTDIR")      # directory containing above files

    raytraceID2 = pipeline.getProcessInstance("RunE2ADC")
    raytraceVars2 = HashMap(raytraceID2.getVariables())
    outputFiles2 = raytraceVars2.get("DC2_OUTPUTLIST2")   # list of output data product filenames from E2ADC
    outputDir2 = raytraceVars2.get("DC2_OUTPUTDIR2")      # directory containing above files
    if debug:print '2- raytraceVars.keySet() = ',raytraceVars.keySet()
    if debug:print '2- raytraceVars2.keySet() = ',raytraceVars2.keySet()

    ## Combine files from raytrace and E2ADC steps
    if outputDir != outputDir2:
        print '%ERROR: output directories for raytrace and E2ADC steps are not the same!'
        print 'raytrace: ',outputDir,', E2ADC: ',outputDir2
        return 1

    outputFiles = outputFiles+','+outputFiles2

    if debug:print '2a - outputFiles = ',outputFiles

    if outputFiles is None:
        print "No output files reported."
        return 1



    rStream = raytraceID.getStream()
    pStream = rStream.getParentStream()
    trimID = pStream.getProcessInstance("RunTrim")
    trimVars = HashMap(trimID.getVariables())
    if debug:print '3- trimVars.keySet() = ',trimVars.keySet()


    tStream = pStream.getParentStream()
    setupID = tStream.getProcessInstance("setupVisit")
    setupVars = HashMap(setupID.getVariables())
    if debug:print '4- setupVars.keySet() = ',setupVars.keySet()
    sys.stdout.flush()


    ## These data come from env-vars in the processing step
    #outputDir = DC2_OUTPUT                             # NERSC directory containing output data products
    obsHistID = setupVars.get("DC2_OBSHISTID")         # visit ID
    sensorID = DC2_SENSORID                            # sensor ID
    filterID = setupVars.get("DC2_FILTER_NUM")         # filter # (012345 -> ugrizy)
    filter = setupVars.get("DC2_FILTER")               # filter

    taskVersionPath = pipeline.getTaskVersionPath()     # bookkeeping (taskname, etc.)
    task = taskVersionPath.split("(")[0]
    taskVersion = taskVersionPath.split('/')[0]
    streamPath = pipeline.getStreamPath()               # bookkeeping (stream hierarchy)


    ## print '1 outputDir = ',outputDir
    ## print '2 outputFiles = ',outputFiles
    ## print '3 obsHistID = ',obsHistID
    ## print '4 sensorID = ',sensorID
    ## print '5 filterID = ',filterID
    ## print '5a filter = ',filter
    ## print '6 taskVersionPath = ',taskVersionPath
    ## print '7 streamPath = ',streamPath
    ## print '8 task = ',task
    ## print '8.5 taskVersion = ',taskVersion
    sys.stdout.flush()



    ## DataCatalog path for data products
    ## /LSST-DESC/DC2/<taskName>/<obsHistID>/<filename>
    ## where "<obsHistID>" is a dataCatalog "group"
    datacatRoot = os.path.join('/LSST-DESC/DC2',task)
    ## print '9 datacatRoot = ',datacatRoot

    ## file types:  lsst_e (fits.gz), lsst_a (fits.gz), centroid (txt), other?

    ## MetaData to store
    ##  
    md = HashMap()
    md.put('nObsHistID',obsHistID)
    md.put('sensorID',sensorID)
    md.put('nFilterID',filterID)
    md.put('filter',filter)
    md.put('streamPath',streamPath)
    md.put('task',taskVersion)

    
    ## Register dataset

    site = 'NERSC'
    group = str(obsHistID)
    outList = outputFiles.split(',')
    if debug:print 'outList = ',outList
    if len(outList) > 0:
        for outFile in outList:
            outFileFull = os.path.join(outputDir,outFile)
            fn = os.path.basename(outFile)
            if debug:print 'fn = ',fn
            if outFile.endswith('.fits'):
                fType = 'fits'
            elif outFile.endswith('fits.gz'):
                fType = 'fits.gz'
            elif outFile.endswith('.txt'):
                fType = 'txt'
            else:
                fType = 'dat'
                pass
            if outFile.startswith('lsst_e'):
                dType = 'PHOSIM_E'
            elif outFile.startswith('lsst_a'):
                dType = 'PHOSIM_A'
            elif outFile.startswith('centroid'):
                dType = 'PHOSIM_C'
            else:
                dType = 'PHOSIM'
                pass

            print '====> Registration: ',fn,'\n filetype and datatype: ',fType,', ',dType,'\n datacat location: ',datacatRoot,':',group,'\n site location: ',site,':',outFileFull

            ds = datacatalog.newDataset(fn,fType,dType,datacatRoot,group,site,outFileFull)
            datacatalog.registerDataset(ds,md,True)
            pass
        pass
    
    ## Done.
    return 0


if __name__ == "__main__":

    rc = addMetadata()
    print 'Return from finishVisit-jy = ',rc
    sys.exit(rc)
